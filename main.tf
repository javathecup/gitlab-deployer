// Services
module "project-factory_project_services" {
  source                      = "terraform-google-modules/project-factory/google//modules/project_services"
  version                     = "11.2.3"
  project_id                  = var.project_id
  disable_services_on_destroy = false

  activate_apis = [
    "cloudbuild.googleapis.com",
    "compute.googleapis.com",
    "container.googleapis.com",
    "servicenetworking.googleapis.com",
    "sqladmin.googleapis.com",
    "secretmanager.googleapis.com",
    "cloudresourcemanager.googleapis.com",
    "redis.googleapis.com",
    "iam.googleapis.com"
  ]
}

resource "google_service_account" "gitlab_gcs" {
  project      = var.project_id
  account_id   = "gitlab-gcs"
  display_name = "GitLab Cloud Storage"
  depends_on = [
    module.project-factory_project_services
  ]
}

resource "google_service_account_key" "gitlab_gcs" {
  service_account_id = google_service_account.gitlab_gcs.name
}

resource "google_project_iam_member" "project" {
  project = var.project_id
  role    = "roles/storage.admin"
  member  = "serviceAccount:${google_service_account.gitlab_gcs.email}"
}

// Networking
resource "google_compute_network" "gitlab" {
  name                    = "gitlab"
  project                 = var.project_id
  auto_create_subnetworks = false
  depends_on = [
    module.project-factory_project_services
  ]
}

resource "google_compute_subnetwork" "subnetwork" {
  name                     = "gitlab"
  ip_cidr_range            = "10.0.0.0/16"
  region                   = var.region
  network                  = google_compute_network.gitlab.self_link
  private_ip_google_access = true
}

// Database
resource "google_compute_global_address" "gitlab_sql" {
  provider      = google-beta
  project       = var.project_id
  name          = "gitlab-sql"
  purpose       = "VPC_PEERING"
  address_type  = "INTERNAL"
  network       = google_compute_network.gitlab.self_link
  prefix_length = 16
}

resource "google_service_networking_connection" "private_vpc_connection" {
  provider                = google-beta
  network                 = google_compute_network.gitlab.self_link
  service                 = "servicenetworking.googleapis.com"
  reserved_peering_ranges = [google_compute_global_address.gitlab_sql.name]
}
resource "random_id" "suffix" {
  byte_length = 4
}
resource "google_sql_database_instance" "gitlab_db" {
  depends_on = [
    google_service_networking_connection.private_vpc_connection,
  ]
  name             = "gitlab-database-${random_id.suffix.hex}"
  region           = var.region
  database_version = "POSTGRES_12"
  settings {
    tier            = "db-f1-micro"
    disk_autoresize = true

    ip_configuration {
      ipv4_enabled    = "false"
      private_network = google_compute_network.gitlab.self_link
    }
  }
}

resource "google_sql_database" "gitlabhq_production" {
  name     = "gitlabhq_production"
  instance = google_sql_database_instance.gitlab_db.name
}

resource "random_string" "autogenerated_gitlab_db_password" {
  length  = 16
  special = false
}

resource "google_sql_user" "gitlab" {
  name     = "gitlab"
  instance = google_sql_database_instance.gitlab_db.name

  password = random_string.autogenerated_gitlab_db_password.result
}

// Redis
resource "google_redis_instance" "gitlab" {
  name               = "gitlabredis"
  tier               = "BASIC"
  memory_size_gb     = 1
  region             = var.region
  authorized_network = google_compute_network.gitlab.self_link
  redis_version      = "REDIS_5_0"

  location_id  = "${var.region}-a"
  display_name = "GitLab Redis"
  depends_on = [
    module.project-factory_project_services
  ]
}

// Cloud Storage
resource "google_storage_bucket" "gitlab-backups" {
  name     = "${var.project_id}-gitlab-backups"
  location = var.region
  depends_on = [
    module.project-factory_project_services
  ]
}

resource "google_storage_bucket" "gitlab-tmp" {
  name     = "${var.project_id}-gitlab-tmp"
  location = var.region
  depends_on = [
    module.project-factory_project_services
  ]
}

resource "google_storage_bucket" "gitlab-uploads" {
  name     = "${var.project_id}-gitlab-uploads"
  location = var.region
  depends_on = [
    module.project-factory_project_services
  ]
}

resource "google_storage_bucket" "gitlab-artifacts" {
  name     = "${var.project_id}-gitlab-artifacts"
  location = var.region
  depends_on = [
    module.project-factory_project_services
  ]
}

resource "google_storage_bucket" "lfs-storage" {
  name     = "${var.project_id}-gitlab-lfs"
  location = var.region
  depends_on = [
    module.project-factory_project_services
  ]
}

resource "google_storage_bucket" "gitlab-packages" {
  name     = "${var.project_id}-gitlab-packages"
  location = var.region
  depends_on = [
    module.project-factory_project_services
  ]
}

resource "google_storage_bucket" "gitlab-terraformstate" {
  name     = "${var.project_id}-gitlab-terraformstate"
  location = var.region
  depends_on = [
    module.project-factory_project_services
  ]
}
resource "google_storage_bucket" "gitlab-registry" {
  name     = "${var.project_id}-registry"
  location = var.region
  depends_on = [
    module.project-factory_project_services
  ]
}

resource "google_storage_bucket" "gitlab-pseudonymizer" {
  name     = "${var.project_id}-gitlab-pseudonymizer"
  location = var.region
  depends_on = [
    module.project-factory_project_services
  ]
}

resource "google_storage_bucket" "gitlab-runner-cache" {
  name     = "${var.project_id}-runner-cache"
  location = var.region
  depends_on = [
    module.project-factory_project_services
  ]
}



module "gitlab-kubernetes-engine" {
  source  = "terraform-google-modules/kubernetes-engine/google"
  version = "17.2.0"
  
  project_id                        = var.project_id
  name                              = "gitlab"
  region                            = var.region
  network                           = google_compute_network.gitlab.name
  subnetwork                        = google_compute_subnetwork.subnetwork.name
  ip_range_pods                     = ""
  ip_range_services                 = ""
  create_service_account            = false
  remove_default_node_pool          = true
  disable_legacy_metadata_endpoints = false

  node_pools = [
    {
      name            = "pool-01"
      initial_node_count = 1
      machine_type       = "e2-standard-2"
      node_locations     = "${var.region}-a,${var.region}-b,${var.region}-c,${var.region}-f"
      preemptible  = true
      autoscaling = false
    },
  ]
}

resource "kubernetes_storage_class" "pd-ssd" {
  metadata {
    name = "pd-ssd"
  }

  storage_provisioner = "kubernetes.io/gce-pd"

  parameters = {
    type = "pd-ssd"
  }
}

resource "kubernetes_secret" "gitlab_pg" {
  metadata {
    name = "gitlab-pg"
  }

  data = {
    password = random_string.autogenerated_gitlab_db_password.result
  }
}

resource "kubernetes_secret" "gitlab_rails_storage" {
  metadata {
    name = "gitlab-rails-storage"
  }

  data = {
    connection = <<EOT
provider: Google
google_project: ${var.project_id}
google_client_email: google_service_account.gitlab_gcs.email
google_json_key_string: '${base64decode(google_service_account_key.gitlab_gcs.private_key)}'
EOT
  }
}

resource "kubernetes_secret" "gitlab_registry_storage" {
  metadata {
    name = "gitlab-registry-storage"
  }

  data = {
    "gcs.json" = <<EOT
${base64decode(google_service_account_key.gitlab_gcs.private_key)}
EOT
    storage    = <<EOT
gcs:
  bucket: ${var.project_id}-registry
  keyfile: /etc/docker/registry/storage/gcs.json
EOT
  }
}

resource "kubernetes_secret" "gitlab_gcs_credentials" {
  metadata {
    name = "google-application-credentials"
  }

  data = {
    gcs-application-credentials-file = "${base64decode(google_service_account_key.gitlab_gcs.private_key)}"
  }
}

resource "helm_release" "gitlab" {
  name       = "gitlab"
  repository = "https://charts.gitlab.io"
  chart      = "gitlab"
  version    = var.gitlab_helm_version
  timeout    = "1000"

  values = [templatefile("./values.yaml.tmpl", {
    CERT_MANAGER_EMAIL    = var.certmanager_email
    DOMAIN                = var.domain
    INGRESS_IP            = var.ip
    DB_PRIVATE_IP         = google_sql_database_instance.gitlab_db.private_ip_address
    REDIS_PRIVATE_IP      = google_redis_instance.gitlab.host
    PROJECT_ID            = var.project_id
    GITLAB_RUNNER_INSTALL = true
  })]

  depends_on = [
    kubernetes_storage_class.pd-ssd,
    kubernetes_secret.gitlab_pg,
    kubernetes_secret.gitlab_rails_storage,
    kubernetes_secret.gitlab_registry_storage,
    kubernetes_secret.gitlab_gcs_credentials,
  ]
}